models/classes.js

const db = require("../db");

const Class = db.model("classes", {
   name:       { type: String, required: true },
   description:      String,
   subject:      String,
   credits:  { type: Number, min: 1, max: 5 },
});

module.exports = Classes;

db.js

const mongoose = require("mongoose");
mongoose.connect("mongodb://localhost/classesdb");
module.exports = mongoose;

server.js

const express = require("express");
const Song = require("./models/classes");

const app = express();

// Middleware that parses HTTP requests with JSON body
app.use(express.json());

const router = express.Router();

// Get list of all classes in the database
router.get("/classes", async function(req, res) {
   try {
      const classes = await Class.find();
      res.json(classes);
   }
   catch (ex) {
      res.status(400).send(ex.message);
   }
});

// Add a new class to the database ?
router.post("/classes", async function(req, res) {
   try {
      const song = new Class(req.body);
      await song.save();
      res.status(201).json(classes);
   }
   catch (ex) {
      res.status(400).send(ex.message);
   }
});

app.use("/api", router);

app.listen(3000);

router.put("/:id", async function(req, res) {
   // class to update sent in body of request
   const classes = req.body;

   try {
      // Replace existing class fields with updated class
      const result = await Class.updateOne({ _id: req.params.id }, classes);
      if (result.matchedCount === 0) {
         res.sendStatus(404);
      } 
      else {
         res.sendStatus(204);
      }
   }
   catch (ex) {
      res.status(400).send(ex.message);
   }
});



EXAMPLE OF WHAT TO DO NEEDS MODIFICATION. 


const express = require("express");
const mongoose = require("mongoose");

mongoose.connect("mongodb://localhost/mydb");

const studentSchema = new mongoose.Schema({
   name:          { type: String, required: true },
   gpa:           { type: Number, min: 0, max: 4 },
   birthDate: { type: Date, default: Date.now },
   interests: [ String ]
});

const Student = mongoose.model("Student", studentSchema);

const app = express();

app.get("/create", async function(req, res) {
   const stu = new Student({
      name: "Sue Black",
      gpa: 3.1,
      birthDate: "2006-11-02",
      interests: ["biking", "reading"]
   });

   await stu.save();
   res.send(`Saved ${stu.name}.`); 
});

app.listen(3000);
